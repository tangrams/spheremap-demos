sources:
    osm: 
        type: TopoJSON
        url: https://meetar.github.io/mapzen-tiles/vector/v1/256/all/{z}/{x}/{y}.topojson
        max_zoom: 8
    normals:
        type: Raster
        url: https://s3.amazonaws.com/elevation-tiles-prod/normal/{z}/{x}/{y}.png

styles: 
    # terrain-envmap:
    #     base: raster
    #     raster: normal
    #     shaders:
    #         uniforms:
    #             u_scale: .5
    #             u_envmap: ../img/crayon-test1.jpg
    #         blocks:
    #             global: |
    #                 // Simplified view-independent environment map
    #                 vec4 applyEnvmap (in sampler2D _tex, in vec3 _normal) {
    #                     const vec3 eye = vec3(0.,0.,-1.);
    #                     vec3 r = reflect(eye, _normal);
    #                     r.z += 1.0;
    #                     float m = 2. * length(r);
    #                     vec2 uv = r.xy / m + .5;
    #                     return texture2D(_tex, uv);
    #                 }
    #             color: |                    
    #                 normal.z *= u_scale;
    #                 normal = normalize(normal);
    #                 color = applyEnvmap(u_envmap, normal);

    functions-map:
        shaders:
            defines:
                EPSILON: 0.0000001
            blocks:
                global: |
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax, bool clamp) {
                        if (abs(inputMin - inputMax) < EPSILON){
                            return outputMin;
                        } else {
                            float outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);
                        
                            if( clamp ){
                                if(outputMax < outputMin){
                                    if( outVal < outputMax ) outVal = outputMax;
                                    else if( outVal > outputMin ) outVal = outputMin;
                                } else {
                                    if( outVal > outputMax ) outVal = outputMax;
                                    else if( outVal < outputMin ) outVal = outputMin;
                                }
                            }
                            return outVal;
                        }
                    }
                    
                    float map (in float value, in float inputMin, in float inputMax, in float outputMin, in float outputMax) {
                        return map(value, inputMin, inputMax, outputMin, outputMax, true); 
                    }

    shapes-rect:
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF(vec2 st, vec2 size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF(vec2 st, float size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    
                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size, float radio) {
                        radio = max(.000001, radio);
                        return 1.0-step(radio, rectDF(st, size-radio));
                    }
                    
                    float rect(vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }
                    
                    // Draw a rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }
                    
                    float rect(vec2 st, float size){
                        return rect(st,vec2(size));
                    }
    shapes-cross:
        mix: shapes-rect
        shaders:
            blocks:
                global: |
                    // Draw a Cross in the middle of the ST space
                    float cross (vec2 st, float size, float width) {
                        return  clamp(  rect(st, vec2(size*0.5,width*0.125)) +
                                        rect(st, vec2(width*0.125,size*0.5)),0.,1.);
                    }
                    float cross(in vec2 st, float _size){
                        return  rect(st, vec2(_size*0.5,_size*0.125)) +
                                rect(st, vec2(_size*0.125,_size*0.5));
                    }
                    float cross(in vec2 st, vec2 _size){
                        return  rect(st, vec2(_size.x*0.5,_size.y*0.125)) +
                                rect(st, vec2(_size.y*0.125,_size.x*0.5));
                    }
    terrain:
        base: polygons
        lighting: false
        # mix: [grid]
        raster: normal
        shaders:
            uniforms:
                u_scale: 1 # higher values are more exaggerated
                u_envmap: ../img/checker.jpg
            blocks:
                global: |
                    vec4 terrainEnvmap (in sampler2D _tex, in vec3 _normal) {
                        const vec3 eye = vec3(0.,0.,-1.);
                        vec3 r = reflect(eye, _normal);
                        r.z += 1.0;
                        float m = 2. * length(r);
                        vec2 uv = r.xy / m + .5;
                        return texture2D(_tex, uv);
                    }
                color: |              
                    // color = v_color;
                    normal.z /= u_scale; // turn terrain exaggeration up/down
                    normal = normalize(normal);
                    color = terrainEnvmap(u_envmap, normal);
                    
                    // color *= v_color; // apply layer color to envmap
                    
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords () {
                        return fract(v_pos.xy);
                    }
                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
                    
    dots-terrain: 
        mix: [space-tile, functions-map, terrain, shapes-cross]
        shaders:
            blocks:
                color: |                    
                    // Brightness
                    float brightness = dot(normal, vec3(-0.838,-1.010,0.805));

                    brightness = 1.-brightness;

                    // Scale
                    float scale = map(floor(u_map_position.z), 8., 22., 0.0000001, .1, true);
                    vec2 st = worldPosition().xy*scale;


                    // PATERNS
                    float pct = 0.0;

                    // Stripes
                    // pct = step(brightness*4.556,cos((st.x+st.y)));


                    // Cell patterns
                    st.x += step(1., mod(st.y,2.0)) *.5;
                    vec2 f_st = fract(st);
                    f_st -= .5;

                    // Dots
                    pct = step(brightness*2.056,1.-dot(f_st,f_st)*10.400);

                    // Lines
                    // pct = rect(f_st+0.5,vec2(0.704,brightness*0.472));

                    // Cross
                    //pct = cross(f_st+0.5,brightness*6.128,brightness*2.604);

                    // Use this if you tint
                    // if (pct < .5) {
                        // discard;
                    // }

                    color.rgb = mix(color.rgb, v_color.rgb ,pct);

layers:
    terrain:
        data: { source: normals, layer: _default }
        draw:
            terrain:
                order: 0

    water-lines:
        data: { source: osm, layer: water }
        filter: { kind: ocean, boundary: true }
        draw:
            lines:
                order: 2
                color: [.3, .3, .3]
                width: 1px

    water:
        data: { source: osm }
        draw:
            polygons:
                order: 3
                color: [0.0,0.0,0.0]

    # landuse:
    #     data: { source: osm}
    #     draw:
    #         dots-terrain:
    #             order: 1
    #             color: [0.935, 0.861, 0.000]

    places:
        data: { source: osm}
        filter: 
            kind_detail: [city]
        draw:
            text:
                font:
                    fill: white
                    size: 16px
                    stroke: { color: '#444', width: 4px}
