scene:
    animated: true

sources:
    osm: 
        type: TopoJSON
        url: https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
        max_zoom: 16
    normals:
        type: Raster
        url: https://terrain-preview.mapzen.com/terrarium/{z}/{x}/{y}.png
        max_zoom: 15

styles: 
    hillshade:
        base: raster
        texcoords: true
        shaders:
            blocks:
                global: |
                    float unpack(vec4 h) {
                        return (h.r * 1. + h.g / 256. + h.b / 65536.);
                    }
                color: |
                    // Normal from heightmap
                    // adapted from
                    // http://stackoverflow.com/questions/5281261/generating-a-normal-map-from-a-height-map
                    // http://stackoverflow.com/questions/15178225/normal-map-from-height-map-artifact
                    float px = 1.;
                    vec3 off = vec3(-px, 0, px);

                    float h = unpack(color);

                    // Sample heightmap at center, left, right, above, below
                    float h01 = unpack(sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + off.xy)));
                    float h21 = unpack(sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + off.zy)));
                    float h10 = unpack(sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + off.yx)));
                    float h12 = unpack(sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + off.yz)));

                    // left/right + up/down kernel (softer)
                    vec3 va = normalize(vec3(off.xy/-2./rasterPixelSize(0),h21-h01));
                    vec3 vb = normalize(vec3(off.yx/-2./rasterPixelSize(0),h12-h10));

                    normal = normalize(cross(va, vb));

                    // adjust width of line based on normals to produce thinner line on flatter surfaces
                    float adj = (1. / normal.z) * 1. - .9999;
                    float w = 1.5 * adj * (1.5 - fract(u_map_position.z));
                    float val = fract(h  * (250. * (1. + fract(u_time * .001))));
                    float triangle = abs(1. * val - 1.0);
                    float square = smoothstep(.0, w, triangle);
                    square *= smoothstep(w, w+w, val);
                    color.rgb = vec3(square);

                    val = fract(h  * (1000. * (1. + fract(u_time * .001))));
                    triangle = abs(1. * val - 1.0);
                    square = smoothstep(.0, w, triangle);
                    square *= smoothstep(w, w+w, val);
                    color.rgb *= vec3(square);

layers:
    terrain:
        data: { source: normals, layer: _default }
        draw:
            hillshade:
                order: 0

    earth:
        data: { source: osm }
        draw:
            lines: 
                order: 2
                color: [.3, .3, .3]
                width: 1px

    places:
        data: { source: osm}
        filter: 
            kind: [city]
        draw:
            text:
                font:
                    fill: white
                    size: 16px
                    stroke: { color: '#444', width: 4px}
